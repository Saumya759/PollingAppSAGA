{"version":3,"sources":["components/Login.jsx","components/Header.jsx","redux/constant.jsx","redux/action/index.js","pages/Login.jsx","pages/Signup.jsx","components/Poll.jsx","pages/PollList.jsx","App.js","serviceWorker.js","redux/reducer/LoginReducer.jsx","redux/reducer/SignupReducer.jsx","redux/reducer/ListReducer.jsx","redux/reducer/CombineReducer.jsx","redux/saga/loginSaga.js","redux/saga/signupSaga.js","redux/saga/ListSaga.js","redux/saga/combineSaga.js","redux/store.jsx","index.js"],"names":["Login","to","className","Button","as","type","value","Header","heading","Container","Row","Col","xs","md","LOGIN_REQ","LOGIN_SUCCESS","LOGIN_ERR","SIGNUP_REQ","SIGNUP_SUCCESS","SIGNUP_ERR","LIST_REQ","LIST_SUCCESS","LIST_ERR","loginReq","createAction","constant","loginSuccess","loginErr","signupReq","signupSuccess","signupErr","listReq","listSuccess","listErr","dispatch","useDispatch","history","useHistory","LoginData","useSelector","state","LoginReducerstatus","useState","username","usernameUpdate","password","passwordUpdate","err","errUpdate","useEffect","isLogin","push","response","data","isLoading","Spinner","animation","variant","Form","onSubmit","e","preventDefault","Group","controlId","Label","column","sm","Control","placeholder","onChange","event","target","Alert","Signup","signupState","SignupReducerstatus","role","roleUpdate","success","successUpdate","message","Poll","poll","title","options","map","i","name","option","Math","random","Home","listState","ListReducerstatus","console","log","_id","App","exact","path","localStorage","getItem","component","PollList","Boolean","window","location","hostname","match","initialState","LoginReducer","action","payload","isSignup","isError","ListReducer","RootReducer","combineReducers","SignupReducer","loginSaga","loginRequest","fetch","process","REACT_APP_BASE_URL","json","error","put","setItem","token","takeLatest","signupSaga","signupRequest","listSaga","listRequest","res","allSaga","all","fork","sagaMiddleware","createSagaMiddleware","store","createStore","rootReducer","applyMiddleware","run","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.53462eb7.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"../styles/Header.css\";\nimport { Button } from \"react-bootstrap\";\nconst Login = () => {\n  return (\n    <>\n      <Link to=\"/login\" className=\"link-header\">\n        {\" \"}\n        <Button\n          className=\"button\"\n          as=\"input\"\n          type=\"submit\"\n          value=\"LOGIN\"\n        />{\" \"}\n      </Link>\n    </>\n  );\n};\nexport default Login;\n","import React from \"react\";\nimport { Container, Row, Col, Button } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport \"../styles/Header.css\";\nimport Login from \"./Login\";\n\nconst Header = ({ heading }) => {\n  return (\n    <>\n      <div className=\"template\">\n        <Container>\n          <Row>\n            <Col xs={6}>\n              <b>POLLING APP</b>\n            </Col>\n            <Col xs={6}>\n              <Row md={4}>\n                <Col>\n                  <Login />\n                </Col>\n                <Col xs={6}>\n                  <Link to=\"/signup\" className=\"link-header\">\n                    {\" \"}\n                    <Button\n                      className=\"button\"\n                      as=\"input\"\n                      type=\"submit\"\n                      value=\"SIGNUP\"\n                    />{\" \"}\n                  </Link>\n                </Col>\n              </Row>\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    </>\n  );\n};\n\nexport default Header;\n","export const LOGIN_REQ = \"LOGIN_REQ\"\nexport const LOGIN_SUCCESS = \"LOGIN_SUCCESS\"\nexport const LOGIN_ERR = \"LOGIN_ERR\"\n\nexport const SIGNUP_REQ = \"SIGNUP_REQ\"\nexport const SIGNUP_SUCCESS = \"SIGNUP_SUCCESS\"\nexport const SIGNUP_ERR = \"SIGNUP_ERR\"\n\nexport const LIST_REQ = \"LIST_REQ\"\nexport const LIST_SUCCESS = \"LIST_SUCCESS\"\nexport const LIST_ERR = \"LIST_ERR\"","import { createAction } from \"redux-actions\";\nimport * as constant from \"../constant\";\n\nexport const loginReq = createAction(constant.LOGIN_REQ);\nexport const loginSuccess = createAction(constant.LOGIN_SUCCESS);\nexport const loginErr = createAction(constant.LOGIN_ERR);\n\nexport const signupReq = createAction(constant.SIGNUP_REQ);\nexport const signupSuccess = createAction(constant.SIGNUP_SUCCESS);\nexport const signupErr = createAction(constant.SIGNUP_ERR);\n\nexport const listReq = createAction(constant.LIST_REQ);\nexport const listSuccess = createAction(constant.LIST_SUCCESS);\nexport const listErr = createAction(constant.LIST_ERR);\n","import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Form, Button, Spinner, Alert, Row, Col } from \"react-bootstrap\";\nimport \"../styles/Login.css\";\nimport Header from \"../components/Header\";\nimport { loginReq } from \"../redux/action/index\";\nimport { useHistory } from \"react-router-dom\";\nimport { useEffect } from \"react\";\n\nconst Login = () => {\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const LoginData = useSelector((state) => state.LoginReducerstatus);\n  const [username, usernameUpdate] = useState(\"\");\n  const [password, passwordUpdate] = useState(\"\");\n  const [err, errUpdate] = useState(\"\");\n\n  useEffect(() => {\n    if (LoginData.isLogin) {\n      history.push(\"/polllist\");\n    }\n    LoginData.response ? errUpdate(LoginData.response.data) : errUpdate(\"\");\n  }, [LoginData]);\n  const formDataHandler = () => {\n    const formData = { username, password };\n    dispatch(loginReq(formData));\n  };\n\n  return (\n    <>\n      {LoginData.isLoading ? (\n        <Spinner animation=\"border\" variant=\"info\" className=\"Spinner\" />\n      ) : (\n        <div className=\"Login\">\n          <Header heading=\"LOGIN\" />\n          <Form\n            className=\"login-form\"\n            onSubmit={(e) => {\n              e.preventDefault();\n              formDataHandler();\n            }}\n          >\n            <Form.Group as={Row} controlId=\"formBasicEmail\">\n              <Form.Label column sm=\"2\">\n                {\" \"}\n                Username{\" \"}\n              </Form.Label>\n              <Col sm=\"10\">\n                <Form.Control\n                  className=\"email\"\n                  type=\"text\"\n                  placeholder=\"Username\"\n                  value={username}\n                  onChange={(event) => {\n                    usernameUpdate(event.target.value);\n                  }}\n                />\n              </Col>\n            </Form.Group>\n            <br />\n            {err ? <Alert variant=\"danger\"> {err} </Alert> : \"\"}\n            <Form.Group as={Row} controlId=\"formBasicPassword\">\n              <Form.Label column sm=\"2\">\n                {\" \"}\n                Password{\" \"}\n              </Form.Label>\n              <Col sm=\"10\">\n                <Form.Control\n                  className=\"email\"\n                  type=\"password\"\n                  placeholder=\"Password\"\n                  value={password}\n                  onChange={(event) => {\n                    passwordUpdate(event.target.value);\n                  }}\n                />\n              </Col>\n            </Form.Group>\n            <br />\n            <Button variant=\"primary\" type=\"submit\">\n              {\" \"}\n              LOGIN{\" \"}\n            </Button>\n          </Form>\n        </div>\n      )}\n    </>\n  );\n};\nexport default Login;\n","import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Form, Button, Spinner, Alert, Row, Col } from \"react-bootstrap\";\nimport Header from \"../components/Header\";\nimport \"../styles/Signup.css\";\nimport { signupReq } from \"../redux/action/index\";\nimport { useEffect } from \"react\";\n\nconst Signup = () => {\n  const dispatch = useDispatch();\n  const signupState = useSelector((state) => state.SignupReducerstatus);\n  const [role, roleUpdate] = useState(\"\");\n  const [username, usernameUpdate] = useState(\"\");\n  const [password, passwordUpdate] = useState(\"\");\n  const [err, errUpdate] = useState(\"\");\n  const [success, successUpdate] = useState(\"\");\n  useEffect(() => {\n    if (signupState.response) {\n      if (signupState.response.message) {\n        errUpdate(signupState.response.message);\n        successUpdate(\"\");\n      } else if (signupState.response.data) {\n        successUpdate(\"Signup Success.\");\n        errUpdate(\"\");\n        usernameUpdate(\"\");\n        passwordUpdate(\"\");\n        roleUpdate(\"\");\n      }\n    } else {\n      successUpdate(\"\");\n      errUpdate(\"\");\n    }\n  }, [signupState]);\n  const formDataHandler = () => {\n    const formData = { username, password, role };\n    dispatch(signupReq(formData));\n  };\n  return (\n    <>\n      {signupState.isLoading ? (\n        <Spinner animation=\"border\" variant=\"info\" className=\"Spinner\" />\n      ) : (\n        <div className=\"Signup\">\n          <Header heading=\"SIGNUP\" />\n          <Form\n            className=\"signup-form\"\n            onSubmit={(e) => {\n              e.preventDefault();\n              formDataHandler();\n            }}\n          >\n            {success ? <Alert variant=\"success\"> {success} </Alert> : \"\"}\n\n            <Form.Group as={Row} controlId=\"formBasicEmail\">\n              <Form.Label column sm=\"2\">\n                Email address{\" \"}\n              </Form.Label>\n              <Col sm=\"10\">\n                <Form.Control\n                  className=\"email\"\n                  type=\"text\"\n                  placeholder=\"User Name\"\n                  value={username}\n                  onChange={(event) => {\n                    usernameUpdate(event.target.value);\n                  }}\n                />{\" \"}\n              </Col>\n            </Form.Group>\n            <br />\n            {err ? <Alert variant=\"danger\"> {err} </Alert> : \"\"}\n            <Form.Group as={Row} controlId=\"formBasicPassword\">\n              <Form.Label column sm=\"2\">\n                Password\n              </Form.Label>\n              <Col sm=\"10\">\n                <Form.Control\n                  className=\"email\"\n                  type=\"password\"\n                  placeholder=\"Password\"\n                  value={password}\n                  onChange={(event) => {\n                    passwordUpdate(event.target.value);\n                  }}\n                />\n              </Col>\n            </Form.Group>\n            <br />\n            <Form.Group as={Row} controlId=\"exampleForm.ControlSelect1\">\n              <Form.Label column sm=\"2\">\n                {\" \"}\n                Select Role{\" \"}\n              </Form.Label>\n              <Col sm=\"10\">\n                <Form.Control\n                  as=\"select\"\n                  value={role}\n                  onChange={(event) => {\n                    roleUpdate(event.target.value);\n                  }}\n                >\n                  <option value=\"\"> Select Role </option>\n                  <option value=\"admin\"> Admin </option>\n                  <option value=\"guest\"> Guest </option>\n                </Form.Control>\n              </Col>\n            </Form.Group>\n            <br />\n            <Button variant=\"primary\" type=\"submit\">\n              {\" \"}\n              SIGNUP{\" \"}\n            </Button>\n          </Form>\n        </div>\n      )}\n    </>\n  );\n};\nexport default Signup;\n","import React from \"react\";\n\nconst Poll = ({ poll }) => {\n  return (\n    <div className=\"Poll\">\n      {poll.title}\n      {poll.options.map((i) => {\n        return (\n          <div key={Math.random()}>\n            <input type=\"radio\" name=\"option\" /> {i.option}\n          </div>\n        );\n      })}\n    </div>\n  );\n};\nexport default Poll;\n","import React, { useEffect } from \"react\";\nimport { Spinner } from \"react-bootstrap\";\nimport \"../styles/PollList.css\";\nimport Poll from \"../components/Poll\";\nimport Header from \"../components/Header\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { listReq } from \"../redux/action\";\n\nconst Home = () => {\n  const dispatch = useDispatch();\n  const listState = useSelector((state) => state.ListReducerstatus);\n  console.log(listState);\n\n  useEffect(() => {\n    dispatch(listReq());\n  }, []);\n\n  return (\n    <div className=\"Home\">\n      <Header heading=\"POLLING APP\" />\n      {listState.isLoading ? (\n        <Spinner animation=\"border\" variant=\"info\" className=\"Spinner\" />\n      ) : listState.response ? (\n        listState.response.map((poll) => {\n          return <Poll key={poll._id} poll={poll} />;\n        })\n      ) : (\n        \"bh\"\n      )}\n    </div>\n  );\n};\nexport default Home;\n","import React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch,\n  Redirect,\n} from \"react-router-dom\";\nimport \"./App.css\";\nimport Login from \"./pages/Login\";\nimport Signup from \"./pages/Signup\";\nimport PollList from \"./pages/PollList\";\n\nconst App = () => {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/\">\n          {\" \"}\n          {localStorage.getItem(\"token\") ? (\n            <PollList />\n          ) : (\n            <Redirect to=\"/login\" />\n          )}{\" \"}\n        </Route>\n        <Route path=\"/login\" exact component={Login} />\n        <Route path=\"/signup\" exact component={Signup} />\n        <Route path=\"/polllist\" exact component={PollList} />\n      </Switch>\n    </Router>\n  );\n};\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.0/8 are considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  export function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Let's check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl, config);\n  \n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              'This web app is being served cache-first by a service ' +\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\n            );\n          });\n        } else {\n          // Is not localhost. Just register service worker\n          registerValidSW(swUrl, config);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                  'New content is available and will be used when all ' +\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                );\n  \n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n  \n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n      headers: { 'Service-Worker': 'script' },\n    })\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n          response.status === 404 ||\n          (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready\n        .then(registration => {\n          registration.unregister();\n        })\n        .catch(error => {\n          console.error(error.message);\n        });\n    }\n  }","import * as constant from \"../constant\";\n\nlet initialState = {\n  isLoading: false,\n  isLogin: false,\n};\nfunction LoginReducer(state = initialState, action) {\n  switch (action.type) {\n    case constant.LOGIN_REQ: {\n      return {\n        ...state,\n        isLoading: true,\n        isLogin: false,\n      };\n    }\n    case constant.LOGIN_SUCCESS: {\n      return {\n        ...state,\n        isLoading: false,\n        isLogin: true,\n        response: action.payload,\n      };\n    }\n    case constant.LOGIN_ERR: {\n      return {\n        ...state,\n        isLoading: false,\n        isLogin: false,\n        response: action.payload,\n      };\n    }\n    default:\n      return state;\n  }\n}\nexport default LoginReducer;\n","import * as constant from \"../constant\";\n\nlet initialState = {\n  isSignup: false,\n  isLoading: false,\n  isError: false,\n};\n\nconst Signup = (state = initialState, action) => {\n  switch (action.type) {\n    case constant.SIGNUP_REQ:\n      return {\n        ...state,\n        isSignup: false,\n        isLoading: true,\n        isError: false,\n      };\n    case constant.SIGNUP_SUCCESS:\n      return {\n        ...state,\n        isSignup: true,\n        isLoading: false,\n        response: action.payload,\n      };\n    case constant.SIGNUP_ERR:\n      return {\n        ...state,\n        isSignup: false,\n        isLoading: false,\n        isError: true,\n        response: action.payload,\n      };\n    default:\n      return {\n        ...state,\n      };\n  }\n};\nexport default Signup;\n","import * as constant from \"../constant\";\n\nlet initialState = {\n  isLoading: false,\n};\nfunction ListReducer(state = initialState, action) {\n  switch (action.type) {\n    case constant.LIST_REQ: {\n      return {\n        ...state,\n        isLoading: true,\n      };\n    }\n    case constant.LIST_SUCCESS: {\n      return {\n        ...state,\n        isLoading: false,\n        response: action.payload,\n      };\n    }\n    case constant.LIST_ERR: {\n      return {\n        ...state,\n        isLoading: false,\n        response: action.payload,\n      };\n    }\n    default:\n      return state;\n  }\n}\nexport default ListReducer;\n","import { combineReducers } from \"redux\";\nimport LoginReducer from \"./LoginReducer\";\nimport SignupReducer from \"./SignupReducer\";\nimport ListReducer from \"./ListReducer\";\n\nconst RootReducer = combineReducers({\n  LoginReducerstatus: LoginReducer,\n  SignupReducerstatus: SignupReducer,\n  ListReducerstatus: ListReducer,\n});\nexport default RootReducer;\n","import { takeLatest, put } from \"redux-saga/effects\";\nimport * as constant from \"../constant\";\nimport { loginSuccess, loginErr } from \"../action/index\";\n\nfunction* loginSaga(action) {\n  const response = yield fetch(\n    `${process.env.REACT_APP_BASE_URL}login?username=${action.payload.username}&password=${action.payload.password}`\n  );\n  const data = yield response.json();\n  data.error ? yield put(loginErr(data)) : yield put(loginSuccess(data));\n  localStorage.setItem(\"token\", data.token);\n}\nfunction* loginRequest() {\n  yield takeLatest(constant.LOGIN_REQ, loginSaga);\n}\nexport default loginRequest;\n","import { takeLatest, put } from \"redux-saga/effects\";\nimport * as constant from \"../constant\";\nimport { signupSuccess, signupErr } from \"../action/index\";\n\nfunction* signupSaga(action) {\n  const response = yield fetch(\n    `${process.env.REACT_APP_BASE_URL}add_user?username=${action.payload.username}&password=${action.payload.password}&role=${action.payload.role}`\n  );\n  const data = yield response.json();\n  data.error ? yield put(signupErr(data)) : yield put(signupSuccess(data));\n}\nfunction* signupRequest() {\n  yield takeLatest(constant.SIGNUP_REQ, signupSaga);\n}\nexport default signupRequest;\n","import { takeLatest, put } from \"redux-saga/effects\";\nimport * as constant from \"../constant\";\nimport { listSuccess, listErr } from \"../action/index\";\n\nfunction* listSaga() {\n  try {\n    const response = yield fetch(`${process.env.REACT_APP_BASE_URL}list_polls`);\n    const res = yield response.json();\n    res.error\n      ? yield put(listErr(res.message))\n      : yield put(listSuccess(res.data));\n  } catch (error) {\n    yield put(listErr(\"Error\"));\n  }\n}\nfunction* listRequest() {\n  yield takeLatest(constant.LIST_REQ, listSaga);\n}\nexport default listRequest;\n","import { fork, all } from \"redux-saga/effects\";\nimport loginRequest from \"./loginSaga\";\nimport signupRequest from \"./signupSaga\";\nimport listSaga from \"./ListSaga\";\n\nfunction* allSaga() {\n  yield all([fork(loginRequest), fork(signupRequest), fork(listSaga)]);\n}\nexport default allSaga;\n","import { createStore, applyMiddleware } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\nimport rootReducer from \"./reducer/CombineReducer\";\nimport allSaga from \"./saga/combineSaga\";\n\n// create saga middleware\nconst sagaMiddleware = createSagaMiddleware();\nconst store = createStore(rootReducer, applyMiddleware(sagaMiddleware));\nsagaMiddleware.run(allSaga);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux'\nimport store from './redux/store'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}